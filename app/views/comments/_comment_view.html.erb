<!-- Comment divs are nested to make them easier to display; every comment has a depth value, and by comparing 
it to the depth of the previous comment, you can figure out how many closing div tags you need, if any. Then all 
you need is one "margin-left: 50px" line in the css to make some nice cascading indentation. -->

<%- current_depth = nil -%>
<%- for comment in @comments -%>
<!-- For now, show unapproved comments to logged in users. Probably want
		to specifically target the authors of the work/chapter? -->
  <% if comment.approved or logged_in? %>
 	 <%- if current_depth && comment.depth <= current_depth -%>
  	  <%- (current_depth - comment.depth + 1).times do -%>
 	     </div>
	    <%- end -%>  
	  <%- end -%>

 	 <%- if current_depth.nil? || comment.depth == 0 -%>
 	   <div class="thread">
 	 <%- end -%>

  <div class="comment">
    <%- if comment.depth % 2 == 0 -%>
      <span class='even-comment' id="comment<%=comment.id %>">
    <%- else -%>
      <span class='odd-comment' id="comment<%=comment.id %>">
    <%- end -%>  
    
 	  <%- if comment.is_deleted -%>
 	     <p>(comment deleted)</p>
    <%- else -%>  

      <h3>
        <%- if comment.pseud_id -%>
          <%= link_to comment.pseud.name, comment %> says:
        <%- else -%>
          <%= mail_to comment.email, comment.name %> says:
        <%- end -%>  
      </h3>

      <p><%=h comment.content %></p>
        
      <p>Posted at: <%= comment.created_at %></p>
      
      <p> 
        <%= link_to_function "Reply", 
            update_page {|page| page.replace_html "add-comment#{comment.id}", :partial => @comment = Comment.new, :locals => {:commentable => comment, :button_name => 'Create'}}, 
            :href => new_comment_comment_path(comment) %> | 
        <% if logged_in? && current_user.pseuds.include?(comment.pseud) %> | 
          <%= link_to_function "Edit", 
              update_page {|page| page.replace_html "comment#{comment.id}", :partial => @comment = comment, :locals => {:commentable => comment.commentable, :button_name => 'Update'}}, 
              :href => edit_comment_path(comment) %> |
          <%= link_to 'Destroy', comment, :confirm => 'Are you sure?', :method => :delete %>
        <% end %>
				<% if !comment.pseud && logged_in? %>
						| <%= (comment.approved ? (link_to 'Spam', reject_comment_path(comment), :method => :put) : (link_to 'Not Spam', approve_comment_path(comment), :method => :put ))%>
				<% end %>
      </p>

      <div id="add-comment<%= comment.id %>"></div>
    
    <%- end -%> 
    </span>
    <%- current_depth = comment.depth -%>
	<%- end -%>
<%- end -%>
<%- (current_depth + 1).times do -%>
  </div>
<%- end -%>
